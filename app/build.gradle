// Copyright 2015 The Project Buendia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at: http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distrib-
// uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
// OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
// specific language governing permissions and limitations under the License.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.14.1'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
}

apply plugin: 'com.android.application'
def appId = 'org.projectbuendia.client'
def debugAppIdSuffix = '.dev'
def debugAppId = appId + debugAppIdSuffix
def contentAuthority = appId + '.provider'
def debugContentAuthority = debugAppId + '.provider'

android {
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize = '4g'
    }
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
}
dependencies {
    // Build plugins
    annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.2' // Dependency injection
    compileOnly 'com.squareup.dagger:dagger-compiler:1.2.2' // Dependency injection

    // Local .jar dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Local project dependencies
    implementation project(':third_party:odkcollect')

    // External dependencies
    implementation 'com.android.support:appcompat-v7:22.2.0'
    implementation 'com.android.support:support-annotations:22.2.0'
    implementation 'com.google.code.gson:gson:2.3' // JSON parser
    implementation 'com.google.guava:guava:18.0' // Google common libraries
    annotationProcessor 'com.jakewharton:butterknife:5.1.2' // View injection
    implementation 'com.jakewharton:butterknife:5.1.2' // View injection
    implementation 'com.mcxiaoke.volley:library:1.0.6' // HTTP framework
    implementation 'com.joanzapata.iconify:android-iconify-fontawesome:2.2.2' // Font-based icons
    implementation 'com.squareup.dagger:dagger:1.2.2' // Dependency injection
    implementation 'de.greenrobot:eventbus:2.4.0' // The event bus
    implementation 'joda-time:joda-time:2.5' // Better dates and times
    implementation 'com.facebook.stetho:stetho:1.5.0' // Chrome debugging bridge
    implementation 'com.facebook.stetho:stetho-okhttp:1.5.0' // Network debugging
    implementation 'io.pebbletemplates:pebble:2.6.2' // HTML templating
    implementation 'org.slf4j:slf4j-simple:1.7.12' // HTML templating dependency
    implementation 'org.apache.commons:commons-text:1.6' // ExtendedMessageFormat
    implementation 'com.google.android:flexbox:1.0.0' // Flexbox layout

    // Testing
    androidTestImplementation 'com.android.support.test:runner:0.3'
    // Espresso
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:2.2'
    // Screenshots, multiple android devices on same computer support
    androidTestImplementation 'com.squareup.spoon:spoon-client:1.1.1'
    // Mockito
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.21.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.21.0'
    androidTestImplementation 'org.mockito:mockito-core:2.21.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    // Optional -- UI testing with UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestAnnotationProcessor 'com.jakewharton:butterknife:5.1.2' // View injection
}

apply plugin: 'spoon'

spoon {
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }
}

// Consider spoon to always be "out-of-date" so that spoon tests will run (when
// requested) even when no changes have been made to the build.
tasks['spoon'].outputs.upToDateWhen { false }

// Development builds get the lowest possible version code, so that any release
// build will be considered an upgrade over any development build.
def versionInteger = 0

// Development builds get a version name that identifies the commit.
def repo = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir)
def versionString = repo.head().id.substring(0, 7) + (repo.status().clean ? '' : '+')

// For a release build, use -PversionNumber=1.2.3 to set the version number.
// It should have at most three parts, all numeric (e.g. 1, 1.2, or 1.2.3).
if (project.hasProperty('versionNumber')) {
    // The version number is converted to an integer for the version code,
    // e.g. 2.34.5 becomes 2340005.
    def versionParts = project.versionNumber.split('\\.').toList()
    assert versionParts.size >= 1 && versionParts.size() <= 3
    versionParts.addAll(['0', '0'])  // missing parts default to 0
    def versionMajor = versionParts[0].toInteger()
    def versionMinor = versionParts[1].toInteger()
    def versionPatch = versionParts[2].toInteger()
    assert versionMajor < 100
    assert versionMinor < 100
    assert versionPatch < 10000
    versionInteger = versionMajor * 1000000 + versionMinor * 10000 + versionPatch
    // Construct a normalized string for the version name, formatting integers
    // canonically and dropping trailing zeroes (e.g. '0.001.0' becomes '0.1').
    versionString = versionMajor + '.' + versionMinor + '.' + versionPatch
    versionString = versionString.replaceAll('(\\.0)*$', '')
}
logger.info("Version number: ${versionString}")
logger.info("Version code: ${versionInteger}")

// This is where to look for the .apk signing key.
def clientRoot = file('../')

// OpenMRS server for demos (kept at tip of dev branch, with scratch data).
def serverDev = 'demo.buendia.org'  // an AWS machine running Linux AMI 2017.09

// OpenMRS server for integration testing.
def serverIntegration = 'staging.buendia.org'

// Portable server (Raspberry Pi, NUC, Edison, etc.) on a local network.
def serverLan = 'server'

// Host machine when client runs in an emulator (AVD).
def serverEmulatorHost = '10.0.2.2'

// Server on the Fantastica wifi network.
def serverFantastica = '192.168.1.161'

// If you run `adb reverse tcp:9000 tcp:9000` on your machine with a device connected, and
// use this setting, then the device will talk to a locally running server instance.
def serverLocalhost = '127.0.0.1'

// The interval at which we check for APK updates.
def apkCheckIntervalDefault = 120

// These control the periodic sync frequency for various categories of data.
def smallSyncIntervalDefault = 10  // for syncs that take less than 100 ms
def mediumSyncIntervalDefault = 30  // for syncs that take up to 500 ms
def largeSyncIntervalDefault = 120  // for syncs that take up to 2000 ms

// Just for development.  In production builds, these should be overridden
// using -Pserver=server -PopenmrsUser=user -PopenmrsPassword=pass etc.
def serverDefault = serverDev
def openmrsRootUrlDefault = 'http://' + serverDefault + ':9000/openmrs'
def openmrsUserDefault = 'buendia'
def openmrsPasswordDefault = 'buendia'
def packageServerRootUrlDefault = 'http://' + serverDefault + ':9001'

// Apply overrides such as -Pserver=server -PnonWifiAllowed=true etc.
def server = project.findProperty('server') ?: serverDefault
def openmrsRootUrl = project.findProperty('server') ?
    'http://' + project.server + ':9000/openmrs' :
    project.findProperty('openmrsRootUrl') ?: openmrsRootUrlDefault
def openmrsUser = project.findProperty('openmrsUser') ?: openmrsUserDefault
def openmrsPassword = project.findProperty('openmrsPassword') ?: openmrsPasswordDefault
def packageServerRootUrl = project.findProperty('server') ?
    'http://' + project.server + ':9001' :
    project.findProperty('packageServerRootUrl') ?: packageServerRootUrlDefault
def apkCheckInterval = project.findProperty('apkCheckInterval') ?: apkCheckIntervalDefault
def smallSyncInterval = project.findProperty('smallSyncInterval') ?: smallSyncIntervalDefault
def mediumSyncInterval = project.findProperty('mediumSyncInterval') ?: mediumSyncIntervalDefault
def largeSyncInterval = project.findProperty('largeSyncInterval') ?: largeSyncIntervalDefault
def startingPatientId = project.findProperty('startingPatientId') ?: ''
def periodicSyncDisabled = project.findProperty('periodicSyncDisabled') ?: false
def formInstancesRetained = project.findProperty('formInstancesRetained') ?: false
def nonWifiAllowed = project.findProperty('nonWifiAllowed') ?: false
def syncAdapterPreferred = project.findProperty('syncAdapterPreferred') ?: false

// This is the password used to encrypt the SQLite database on the tablet.
// In development builds, the password is an empty string, which leaves the
// database unencrypted so that it can be easily inspected using Stetho.
def encryptionPassword = project.findProperty('encryptionPassword') ?: ''

logger.info('Default server hostname: ${server}')
logger.info("Default OpenMRS root URL: ${openmrsRootUrl}")
logger.info("Default OpenMRS user: ${openmrsUser}")
logger.info("Default OpenMRS password: ${openmrsPassword}")
logger.info("Default package server root URL: ${packageServerRootUrl}")
logger.info("Database encryption password: ${encryptionPassword}")

android {
    compileSdkVersion 28

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId appId
        minSdkVersion 19
        targetSdkVersion 22
        multiDexEnabled true

        versionCode versionInteger
        versionName versionString
        resValue 'string', 'app_version', versionString

        // To run tests in Android Studio, you will need to open the run configuration
        // and select AndroidJUnitRunner as the "Specific instrumentation runner".
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        testApplicationId appId + '.test'

        // Set the default values of preferences.  (Note: The third arg to resValue
        // must always be a string; it will be converted to the specified data type.)
        resValue 'string', 'server_default', server
        resValue 'string', 'openmrs_root_url_default', openmrsRootUrl
        resValue 'string', 'openmrs_user_default', openmrsUser
        resValue 'string', 'openmrs_password_default', openmrsPassword
        resValue 'string', 'package_server_root_url_default', packageServerRootUrl
        resValue 'integer', 'apk_check_interval_default', '' + apkCheckInterval
        resValue 'integer', 'small_sync_interval_default', '' + smallSyncInterval
        resValue 'integer', 'medium_sync_interval_default', ''+ mediumSyncInterval
        resValue 'integer', 'large_sync_interval_default', '' + largeSyncInterval
        resValue 'string', 'starting_patient_id_default', '' + startingPatientId
        resValue 'bool', 'periodic_sync_disabled_default', '' + periodicSyncDisabled
        resValue 'bool', 'form_instances_retained_default', '' + formInstancesRetained
        resValue 'bool', 'non_wifi_allowed_default', '' + nonWifiAllowed
        resValue 'bool', 'sync_adapter_preferred_default', '' + syncAdapterPreferred

        // Allow different sync adapters to be defined for debug and release builds.
        resValue 'string', 'content_authority', contentAuthority
        buildConfigField 'String', 'CONTENT_AUTHORITY', '"' + contentAuthority + '"'
        resValue 'string', 'account_type', appId
        buildConfigField 'String', 'ACCOUNT_TYPE', '"' + appId + '"'

        // Set the SQLite database encryption password.
        buildConfigField 'String', 'ENCRYPTION_PASSWORD', '"' + encryptionPassword + '"'
    }

    signingConfigs {
        if (System.getenv("CI")) {
            release {
                keyAlias 'buendia'
                keyPassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
                storeFile file(System.getenv('ANDROID_KEYSTORE_FILE'))
                storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
            }
        } else {
            release {
                storeFile file(new File(clientRoot, 'zestybuendia.jks'))
                storePassword ''
                keyAlias 'buendia'
                keyPassword ''
            }
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        lintConfig file('lint.xml')
        htmlReport false
    }

    buildTypes {
        debug {
            applicationIdSuffix debugAppIdSuffix
            resValue 'string', 'content_authority', debugContentAuthority
            buildConfigField 'String', 'CONTENT_AUTHORITY', '"' + debugContentAuthority + '"'
            resValue 'string', 'account_type', debugAppId
            buildConfigField 'String', 'ACCOUNT_TYPE', '"' + debugAppId + '"'
        }

        release {
            // noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }
    }
}

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(':app:assembleRelease')) {
            def cfg = android.signingConfigs.release
            if (!cfg.storeFile.exists()) {
                throw new IllegalStateException("No keystore found at ${cfg.storeFile}.")
            }
            if (!cfg.storePassword || !cfg.keyPassword) {
                if (System.getenv("CI")) {
                    throw new IllegalArgumentException("ANDROID_KEYSTORE_PASSWORD must be set in the environment.")
                }
                if (System.console() == null) {
                    throw new IllegalStateException("Assembling the release build only works from command line with the Gradle Daemon disabled. Please run ./gradlew --no-daemon :app:assembleRelease.")
                }
                def pass = new String(System.console().readPassword("\nPlease enter key passphrase: "))
                if (!pass) {
                    throw new IllegalArgumentException("You must enter a password to proceed.")
                }
                cfg.storePassword = pass
                cfg.keyPassword = pass
            }
        }
}
