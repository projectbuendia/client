<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<!-- Specify font sizes in em (1 em = 10 sp). -->
<!-- Specify margins and paddings in px (1 px = 1 dp). -->
<!-- Specify borders using background-image: linear-gradient. -->

<style>
  body { margin: 0; }
  #container {
    height: 600px;
    overflow-x: auto;
    overflow-y: auto;
    position: relative;
  }

  #new-header {
    position: absolute;
    top: 0;
    background: white;
    z-index: 100;
    overflow-x: auto;
    overflow-y: auto;
  }

  #new-header thead {
    overflow-x: auto;
    overflow-y: auto;
  }

  #new-column {
    position: absolute;
    top: 0;
    background: white;
    z-index: 50;
    overflow-x: auto;
    overflow-y: auto;
  }

  #new-column th {
    padding: 8px 16px;
    border-right: 0.667px solid #999;
  }

  #new-header th {
    display: table-cell;
    padding: 8px 0 8px 16px;
    border-bottom: 0.667px solid #999;
    box-sizing: border-box;
  }

  table { border-collapse: collapse; border-right: 0.667px solid #999; }
  tr:nth-child(even) { background: #f8f8f8; }
  th, td {
    font-weight: normal;
    font-size: 2.4em;
    padding: 8px 0;
    vertical-align: baseline;
    background-image:
      linear-gradient(90deg, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2) 67%, transparent 67%);
    background-size: 1px 100%;
    background-repeat: no-repeat;
    background-position: left;
  }
  th { white-space: nowrap; text-align: left; padding: 8px 16px; }
  .now { font-weight: bold; background: #e0f0ff; }
  tr:nth-child(even) .now { background: #d8e8f8; }
  td { text-align: center; min-width: 3em; }
  tr.heading th { text-align: center; font-size: 1.6em; }
  th.gutter {
    background: transparent;
    text-align: left;
    border: none;
    padding-top: 4.8em;
    text-transform: uppercase;
    font-size: 1.6em;
    font-weight: bold;
  }
  button { font-size: 100%; }
  tr.order td { vertical-align: center: text-align: center; }
  tr.order td div { margin: auto auto; width: 90%; height: 90%; }
  .future { font-size: 75%; color: #999; }
  .stop { font-weight: bold; color: #f66; font-size: 60%; text-transform: uppercase; }
</style>

<div id="container">
  <table id="table">
    <thead class="heading">
      <th></th>
      {% for column in columns %}
        <th class="{{column.start == nowColumnStart ? "now" : ""}}">
          {{column.headingHtml | raw}}
        </th>
      {% endfor %}
    </thead>

    <tbody>
      {% for row in rows %}
        <tr class="obs">
          <th>
            {{row.heading}}
          </th>
          {% for column in columns %}
            <td class="{{column.start == nowColumnStart ? "now" : ""}}">
              {% set values = get_values(row=row, column=column) %}
              {% if values is not empty %}
                {% set last = values | last %}
                {% if last.number != null %}
                  {{values | avg | numberformat("#.#")}}
                {% elseif last.abbrev != null %}
                  {{last.abbrev}}
                {% elseif last.text != null %}
                  <div onclick="alert(''
                    {%- for value in values -%}
                      + '---- '
                      + {{value.observed | dateformat("dd MMM 'at' HH:mm") | js}}
                      + ' ----\n'
                      + {{value.text | js}}
                      + '\n\n'
                    {%- endfor -%})">&#x1f4dd;</div>
                {% elseif last.bool != null %}
                  {{(values | max).bool ? "&#x25cf;" : "" | raw}}
                {% endif %}
              {% endif %}
            </td>
          {% endfor %}
        </tr>
      {% endfor %}

      <tr>
        <th class="gutter" colspan="{{columns.size + 1}}">
          Orders
        </th>
      </tr>

      {% for order in orders %}
        <tr class="order">
          <th>
            {{order.instructions}}
          </th>
          {% set previousActive = false %}
          {% set future = false %}
          {% for column in columns %}
            <td class="{{column.start == nowColumnStart ? "now" : ""}}">
              {% set active = intervals_overlap(order.interval, column.interval) %}
              {% if previousActive and not active %}
                <div class="stop">Stop</div>
              {% elseif active %}
                {% if future %}
                  <div class="future active">&#x25cf;</div>
                {% else %}
                  {% set count = get_order_execution_count(order_uuid=order.uuid, column=column) %}
                  <div class="past active"
                      onclick="controller.onOrderCellPressed('{{order.uuid}}', {{column.start.getMillis}})"
                      >{{count}}</div>
                {% endif %}
              {% endif %}
              {% set previousActive = active %}
              {% set future = future or column.start == nowColumnStart %}
            </td>
          {% endfor %}
        </tr>
      {% endfor %}
    </tbody>

    <tfoot>
      <tr>
        <th colspan="{{columns.size + 1}}">
          <button onclick="controller.onNewOrderPressed()">+ New Order</button>
        </th>
      </tr>
    </tfoot>
  </table>
</div>

<script>
  function load() {
    var container = document.getElementById('container');
    var table = document.getElementById('table');

    var headItens = document.querySelectorAll('#table thead th');
    var headClone = document.createElement('table');
    headClone.id = "new-header";
    var headRow = document.createElement('thead');

    for (i = 0; i< headItens.length; i++) {
      var offsetWidth = headItens[i].offsetWidth;
      var offsetHeight = headItens[i].offsetHeight;
      var newNode = headItens[i].cloneNode(true);
      newNode.style.width = offsetWidth + "px";
      newNode.style.height = offsetHeight + "px";

      var div = document.createElement('div');
      div.style.width = offsetWidth - 16 + "px";
      newNode.appendChild(div);

      headRow.appendChild(newNode);
    }
    headClone.appendChild(headRow);
    container.appendChild(headClone);


    var columnItens = document.querySelectorAll('#table tbody tr th');
    var columnClone = document.createElement('table');
    columnClone.style.top = headItens[0].offsetHeight + "px";

    for (i = 0; i< columnItens.length - 1; i++) {
      var offsetWidth = columnItens[i].offsetWidth;
      var offsetHeight = columnItens[i].offsetHeight;
      var newNode = columnItens[i].cloneNode(true);
      newNode.style.width = offsetWidth + "px";
      newNode.style.height = offsetHeight + "px";

      var columnRow = document.createElement('tr');
      columnRow.appendChild(newNode);
      columnClone.appendChild(columnRow);
    }
    columnClone.id = "new-column";
    container.appendChild(columnClone);

    var tableHeader = document.getElementById('new-header');
    var tableColumn = document.getElementById('new-column');

    function adjustPositions() {
      tableHeader.style.top = this.scrollTop + "px";
      tableColumn.style.left = this.scrollLeft + "px";
    }

    container.onscroll = adjustPositions;
  }

  window.onload = load;
</script>