#!/usr/bin/env python3

import click
import csv
import re
import sys
import xlrd

@click.command()
@click.option(
    '-c', '--code-column', default=1,
    help='medication code column number (counted from 1)'
)
@click.option(
    '-e', '--en-desc-column', default=2,
    help='English description column number (counted from 1)'
)
@click.option(
    '-E', '--en-override-column', default=None, type=int,
    help='English override column number (counted from 1)'
)
@click.option(
    '-f', '--fr-desc-column', default=None, type=int,
    help='French description column number (counted from 1)'
)
@click.option(
    '-F', '--fr-override-column', default=None, type=int,
    help='French override column number (counted from 1)'
)
@click.option(
    '-s', '--sheet', default=1,
    help='sheet name or number (counted from 1)'
)
@click.argument('filename')
def get_meds(filename, sheet, code_column,
             en_desc_column, fr_desc_column,
             en_override_column, fr_override_column):
    book = xlrd.open_workbook(filename)
    code_col = code_column - 1
    en_col = en_desc_column - 1
    fr_col = fr_desc_column - 1 if fr_desc_column else None
    en_over = en_override_column - 1 if en_override_column else None
    fr_over = fr_override_column - 1 if fr_override_column else None
    try:
        s = book.sheet_by_name(sheet)
    except:
        s = book.sheets()[int(sheet) - 1]

    drugs = set()
    drug_list = []
    formats = {}
    items = read_items(s, code_col, en_col, fr_col, en_over, fr_over)
    for code, en_desc, fr_desc in items:
        if not code.startswith('D'):
            continue
        category = code[:4]
        drug = code[:8]
        if drug not in drugs:
            drugs.add(drug)
            drug_list.append(drug)
        en_desc = normalize(unabbreviate(en_desc))
        fr_desc = normalize(unabbreviate(fr_desc))
        formats.setdefault(drug, []).append((code, en_desc, fr_desc))

    results = []
    for drug in drug_list:
        en_name = get_drug_name([en for code, en, fr in formats[drug]])
        fr_name = get_drug_name([fr for code, en, fr in formats[drug]])
        name = pack_en_fr(en_name, fr_name)
        lines = []
        for code, en_desc, fr_desc in formats[drug]:
            en_format = normalize(en_desc[len(en_name):])
            fr_format = normalize(fr_desc[len(fr_name):])
            format = pack_en_fr(en_format, fr_format)
            unit = guess_unit(en_desc)
            lines.append('''\
            new Format("%s", "%s", Unit.%s)''' % 
                (code.strip('-'), format, unit))
        joined_lines = ',\n'.join(lines)
        sys.stdout.write('''\
        new Drug("%s", "%s").withFormats(
%s
        ),
''' % (drug, name, joined_lines))

    csv.writer(sys.stdout).writerows(results)

def pack_en_fr(en_text, fr_text):
    if fr_text.strip():
        return '%s [fr:%s]' % (normalize(en_text), normalize(fr_text))
    else:
        return normalize(en_text)

def get_drug_name(descs):
    if len(descs) == 0:
        return ''
    if len(descs) == 1:
        return split_med(descs[0])[0]

    words = [desc.split() for desc in descs]
    sets = [set(group) for group in zip(*words)]
    w = 0
    while w < len(sets) - 1 and len(sets[w]) == 1:
        w += 1
    return ' '.join(set.pop() for set in sets[:w])

def read_items(s, code_col, en_col, fr_col, en_over, fr_over):
    for row in range(s.nrows):
        code = s.cell(row, code_col).value.strip()
        if ' ' in code:
            continue
        en_desc = s.cell(row, en_col).value
        if en_over is not None:
            en_override = s.cell(row, en_over).value
            en_desc = en_override.strip() or en_desc
        fr_desc = ''
        if fr_col is not None:
            fr_desc = s.cell(row, fr_col).value
            if fr_over is not None:
                fr_override = s.cell(row, fr_over).value
                fr_desc = fr_override.strip() or fr_desc
        yield (code, en_desc, fr_desc)

def split_med(med):
    if '|' in med:
        return med.split('|', 1)
    m = re.match(r'(.*), *(([eé]q[\. ]*)?\d.*)', med)
    if m:
        return m.group(1), m.group(2).lstrip(', ')
    m = re.match(r'([A-Z, ]+), *(.*)', med)
    if m:
        return m.group(1), m.group(2).lstrip(', ')
    m = re.match(r'([^,]+), *(.*)', med)
    if m:
        return m.group(1), m.group(2).lstrip(', ')
    return med, ''

def normalize(desc):
    for search, replace in [
        (r'^[ ,]*|[ ,]*$', ''),  # remove leading/trailing spaces/commas
        (r'\s+', ' '),  # collapse whitespace to single space
        (r'(\d),(\d)', r'\1.\2'),  # turn commas into decimal points
        (r' *, *', ', '),  # no space before, one space after any comma
        (r'(\d)(g|mg|µg|l|ml)\b', r'\1 \2'),  # space before any unit
    ]:
        desc = re.sub(search, replace, desc)
    return desc

def unabbreviate(desc):
    for search, replace in [
        (r'\bCLAV\.', 'CLAVULANIC '),
        (r'\bDEXAMET\.', 'DEXAMETHASONE '),
        (r'\bNEOMYC\.', 'NEOMYCINE '),
        (r'\(vaccine BCG\)', 'VACCINE BCG,'),
        (r'\(vaccin BCG\)', 'VACCIN BCG,'),
        (r'\(vaccine measles\)', 'VACCINE MEASLES,'),
        (r'\(vaccin rougeole\)', 'VACCIN ROUGEOLE,'),
        (r'\(vaccine mening. A conj. ([-0-9]+ *(y|m|ans|mois))\)',
            r'VACCINE MENINGOCOCCAL A CONJUGATE, \1,'),
        (r'\(vaccin méning. A conj. ([-0-9]+ *(y|m|ans|mois))\)',
            r'VACCIN MENINGOCOQUE A CONJUGUE, \1,'),
        (r'VACCINE MENINGOCOCCAL A CONJ.',
            r'VACCINE MENINGOCOCCAL A CONJUGATE'),
        (r'VACCIN MENINGOCOQUE A CONJ.',
            r'VACCIN MENINGOCOQUE A CONJUGUE'),
        (r'\(MEASLES/RUBELLA VACCINE\)',
            r'MEASLES/RUBELLA VACCINE, '),
        (r'\(VACCIN ROUGEOLE/ROUBEOLE\)',
            r'VACCIN ROUGEOLD/ROUBEOLE,'),
        (r'\(vaccine MMR\)', 'VACCINE MMR, '),
        (r'\(vaccin ROR\)', 'VACCIN ROR, '),
        (r'\(VACCINE MMR,measles/mumps/rubella\)',
            r'VACCINE MMR (measles/mumps/rubella),'),
        (r'\(VACCIN ROR,rougeole/oreillons/rubéole\)',
            r'VACCIN ROR (rougeole/oreillons/rubéole),'),
        (r'\(bivalent oral polio vaccine\)',
            'VACCINE POLIOMYELITIS, BIVALENT ORAL,'),
        (r'\(vaccin polio oral bivalent\)',
            'VACCINE POLIO, BIVALENT ORAL,')
    ]:
        desc = re.sub(search, replace, desc)
    return desc


def guess_unit(desc):
    if re.findall(r'\btab\.?\b', desc):
        return 'TABLET'
    if re.findall(r'\bcaps?\.?\b', desc):
        return 'CAPSULE'
    if re.findall(r'/ *[0-9.]+ *ml\b', desc) or re.findall(r'\d%', desc):
        return 'ML'
    return 'MG'

if __name__ == '__main__':
    get_meds()
