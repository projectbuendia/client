#!/usr/bin/env python3

import click
import csv
import re
import sys
import xlrd

@click.command()
@click.option(
    '-c', '--code-column', default=1,
    help='medication code column number (counted from 1)'
)
@click.option(
    '-e', '--en-desc-column', default=2,
    help='English description column number (counted from 1)'
)
@click.option(
    '-f', '--fr-desc-column', default=None, type=int,
    help='French description column number (counted from 1)'
)
@click.option(
    '-s', '--sheet', default=1,
    help='sheet name or number (counted from 1)'
)
@click.argument('filename')
def get_meds(code_column, en_desc_column, fr_desc_column, sheet, filename):
    book = xlrd.open_workbook(filename)
    code_col = code_column - 1
    en_col = en_desc_column - 1
    fr_col = fr_desc_column - 1 if fr_desc_column is not None else None
    try:
        s = book.sheet_by_name(sheet)
    except:
        s = book.sheets()[int(sheet) - 1]

    drugs = set()
    drug_list = []
    formats = {}
    for code, en_desc, fr_desc in read_items(s, code_col, en_col, fr_col):
        if not code.startswith('D'):
            continue
        category = code[:4]
        drug = code[:8]
        if drug not in drugs:
            drugs.add(drug)
            drug_list.append(drug)
        formats.setdefault(drug, []).append((code, en_desc, fr_desc))

    results = []
    for drug in drug_list:
        en_name = get_drug_name([en for code, en, fr in formats[drug]])
        fr_name = get_drug_name([fr for code, en, fr in formats[drug]])
        name = pack_en_fr(en_name, fr_name)
        lines = []
        for code, en_desc, fr_desc in formats[drug]:
            en_format = normalize(en_desc[len(en_name):])
            fr_format = normalize(fr_desc[len(fr_name):])
            format = pack_en_fr(en_format, fr_format)
            unit = guess_unit(en_desc)
            lines.append('''\
            new Format("%s", "%s", Unit.%s)''' % 
                (code.strip('-'), format, unit))
        joined_lines = ',\n'.join(lines)
        sys.stdout.write('''\
        new Drug("%s", "%s").withFormats(
%s
        ),
''' % (drug, name, joined_lines))

    csv.writer(sys.stdout).writerows(results)

def pack_en_fr(en_text, fr_text):
    if fr_text.strip():
        return '%s [fr:%s]' % (normalize(en_text), normalize(fr_text))
    else:
        return normalize(en_text)

def get_drug_name(descs):
    if len(descs) == 0:
        return ''
    if len(descs) == 1:
        return split_med(descs[0])[0]

    words = [desc.split() for desc in descs]
    sets = [set(group) for group in zip(*words)]
    w = 0
    while w < len(sets) - 1 and len(sets[w]) == 1:
        w += 1
    return ' '.join(set.pop() for set in sets[:w])

def read_items(s, code_col, en_col, fr_col):
    for row in range(s.nrows):
        code = s.cell(row, code_col).value.strip()
        if ' ' in code:
            continue
        en_desc = s.cell(row, en_col).value
        fr_desc = ''
        if fr_col is not None:
            fr_desc = s.cell(row, fr_col).value
        yield (code, normalize(en_desc), normalize(fr_desc))

def split_med(med):
    if '|' in med:
        return med.split('|', 1)
    m = re.match(r'(.*), *(([eÃ©]q[\. ]*)?\d.*)', med)
    if m:
        name, quantity = m.group(1), m.group(2).lstrip(', ')
    else:
        name, quantity = med, ''
    return name, quantity

def normalize(desc):
    desc = re.sub(r'^[ ,]+|[ ,]+$', '', desc)
    desc = re.sub(r'\s+', ' ', desc)
    desc = re.sub(r'([^ a-zA-Z])(kg|mg|ml)\b', r'\1 \2', desc)
    return desc

def guess_unit(desc):
    if re.findall(r'\btab\.?\b', desc):
        return 'TABLET'
    if re.findall(r'\bcaps?\.?\b', desc):
        return 'CAPSULE'
    if re.findall(r'/ *[0-9.]+ *ml\b', desc) or re.findall(r'\d%', desc):
        return 'ML'
    return 'MG'

if __name__ == '__main__':
    get_meds()
